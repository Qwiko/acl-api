"""empty message

Revision ID: b86cb4eaaa57
Revises:
Create Date: 2025-03-28 13:02:37.664154

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b86cb4eaaa57"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dynamic_policies",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("filter_action", sa.String(), nullable=True),
        sa.Column("default_action", sa.String(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "networks",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "policies",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "services",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "targets",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("generator", sa.String(), nullable=False),
        sa.Column("inet_mode", sa.String(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "tests",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "dynamic_policy_destination_filter_association",
        sa.Column("dynamic_policy_id", sa.Integer(), nullable=False),
        sa.Column("network_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dynamic_policy_id"],
            ["dynamic_policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["network_id"],
            ["networks.id"],
        ),
        sa.PrimaryKeyConstraint("dynamic_policy_id", "network_id"),
    )
    op.create_table(
        "dynamic_policy_source_filter_association",
        sa.Column("dynamic_policy_id", sa.Integer(), nullable=False),
        sa.Column("network_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dynamic_policy_id"],
            ["dynamic_policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["network_id"],
            ["networks.id"],
        ),
        sa.PrimaryKeyConstraint("dynamic_policy_id", "network_id"),
    )
    op.create_table(
        "network_addresses",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("network_id", sa.Integer(), nullable=False),
        sa.Column("address", postgresql.CIDR(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("nested_network_id", sa.Integer(), server_default=sa.text("NULL"), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["nested_network_id"],
            ["networks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["network_id"],
            ["networks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "policy_terms",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("policy_id", sa.Integer(), nullable=False),
        sa.Column("lex_order", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("option", sa.String(), nullable=True),
        sa.Column("logging", sa.Boolean(), nullable=True),
        sa.Column("action", sa.String(), nullable=True),
        sa.Column("negate_source_networks", sa.Boolean(), nullable=True),
        sa.Column("negate_destination_networks", sa.Boolean(), nullable=True),
        sa.Column("nested_policy_id", sa.Integer(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["nested_policy_id"],
            ["policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["policy_id"],
            ["policies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("policy_id", "lex_order", name="uq_policy_lex_order"),
        sa.UniqueConstraint("policy_id", "name", name="uq_policy_name"),
    )
    op.create_index(op.f("ix_policy_terms_lex_order"), "policy_terms", ["lex_order"], unique=False)
    op.create_index(op.f("ix_policy_terms_policy_id"), "policy_terms", ["policy_id"], unique=False)
    op.create_table(
        "revisions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("json_data", sa.JSON(), nullable=False),
        sa.Column("policy_id", sa.Integer(), nullable=True),
        sa.Column("dynamic_policy_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.CheckConstraint(
            "(policy_id IS NOT NULL OR dynamic_policy_id IS NOT NULL) AND NOT (policy_id IS NOT NULL AND dynamic_policy_id IS NOT NULL)",
            name="check_policy_or_dynamic_policy_only_one",
        ),
        sa.ForeignKeyConstraint(
            ["dynamic_policy_id"],
            ["dynamic_policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["policy_id"],
            ["policies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "service_entries",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.Column("protocol", sa.String(), nullable=True),
        sa.Column("port", sa.String(), nullable=True),
        sa.Column("nested_service_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["nested_service_id"],
            ["services.id"],
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["services.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "target_dynamic_policy_association",
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("dynamic_policy_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dynamic_policy_id"],
            ["dynamic_policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_id"],
            ["targets.id"],
        ),
        sa.PrimaryKeyConstraint("target_id", "dynamic_policy_id"),
    )
    op.create_table(
        "target_policy_association",
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("policy_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["policy_id"],
            ["policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_id"],
            ["targets.id"],
        ),
        sa.PrimaryKeyConstraint("target_id", "policy_id"),
    )
    op.create_table(
        "test_cases",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("test_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("expected_action", sa.String(), nullable=False),
        sa.Column("source_network", postgresql.INET(), nullable=True),
        sa.Column("destination_network", postgresql.INET(), nullable=True),
        sa.Column("source_port", sa.Integer(), nullable=True),
        sa.Column("destination_port", sa.Integer(), nullable=True),
        sa.Column("protocol", sa.String(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["tests.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_test_cases_test_id"), "test_cases", ["test_id"], unique=False)
    op.create_table(
        "test_dynamic_policy_association",
        sa.Column("test_id", sa.Integer(), nullable=False),
        sa.Column("dynamic_policy_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dynamic_policy_id"],
            ["dynamic_policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["tests.id"],
        ),
        sa.PrimaryKeyConstraint("test_id", "dynamic_policy_id"),
    )
    op.create_table(
        "test_policy_association",
        sa.Column("test_id", sa.Integer(), nullable=False),
        sa.Column("policy_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["policy_id"],
            ["policies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["test_id"],
            ["tests.id"],
        ),
        sa.PrimaryKeyConstraint("test_id", "policy_id"),
    )
    op.create_table(
        "policy_term_destination_network_association",
        sa.Column("policy_term_id", sa.Integer(), nullable=False),
        sa.Column("network_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["network_id"],
            ["networks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["policy_term_id"],
            ["policy_terms.id"],
        ),
        sa.PrimaryKeyConstraint("policy_term_id", "network_id"),
    )
    op.create_table(
        "policy_term_destination_service_association",
        sa.Column("policy_term_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["policy_term_id"],
            ["policy_terms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["services.id"],
        ),
        sa.PrimaryKeyConstraint("policy_term_id", "service_id"),
    )
    op.create_table(
        "policy_term_source_network_association",
        sa.Column("policy_term_id", sa.Integer(), nullable=False),
        sa.Column("network_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["network_id"],
            ["networks.id"],
        ),
        sa.ForeignKeyConstraint(
            ["policy_term_id"],
            ["policy_terms.id"],
        ),
        sa.PrimaryKeyConstraint("policy_term_id", "network_id"),
    )
    op.create_table(
        "policy_term_source_service_association",
        sa.Column("policy_term_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["policy_term_id"],
            ["policy_terms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["service_id"],
            ["services.id"],
        ),
        sa.PrimaryKeyConstraint("policy_term_id", "service_id"),
    )
    op.create_table(
        "revision_configs",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("revision_id", sa.Integer(), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("filter_name", sa.String(), nullable=True),
        sa.Column("config", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["revision_id"],
            ["revisions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["target_id"],
            ["targets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_revision_configs_revision_id"), "revision_configs", ["revision_id"], unique=False)
    op.create_index(op.f("ix_revision_configs_target_id"), "revision_configs", ["target_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_revision_configs_target_id"), table_name="revision_configs")
    op.drop_index(op.f("ix_revision_configs_revision_id"), table_name="revision_configs")
    op.drop_table("revision_configs")
    op.drop_table("policy_term_source_service_association")
    op.drop_table("policy_term_source_network_association")
    op.drop_table("policy_term_destination_service_association")
    op.drop_table("policy_term_destination_network_association")
    op.drop_table("test_policy_association")
    op.drop_table("test_dynamic_policy_association")
    op.drop_index(op.f("ix_test_cases_test_id"), table_name="test_cases")
    op.drop_table("test_cases")
    op.drop_table("target_policy_association")
    op.drop_table("target_dynamic_policy_association")
    op.drop_table("service_entries")
    op.drop_table("revisions")
    op.drop_index(op.f("ix_policy_terms_policy_id"), table_name="policy_terms")
    op.drop_index(op.f("ix_policy_terms_lex_order"), table_name="policy_terms")
    op.drop_table("policy_terms")
    op.drop_table("network_addresses")
    op.drop_table("dynamic_policy_source_filter_association")
    op.drop_table("dynamic_policy_destination_filter_association")
    op.drop_table("tests")
    op.drop_table("targets")
    op.drop_table("services")
    op.drop_table("policies")
    op.drop_table("networks")
    op.drop_table("dynamic_policies")
    # ### end Alembic commands ###
